Documentation for use of Mote-Include GearSwaps.


 ------   SETS   ------

Sets are constructed hierarchically.  The 'sets' set is the root node.  Other broad categories of sets descend from the root node, and are named in lowercase.  Each of those groups has other descendants. Major breaking-off points, where you start specifying sets by spell name or option, are capitalized, as are final-tier options.  Explicitly known set groups:

sets
    .precast
        .FC
        .JA
        .WS
        .~type (ie: spell.type, such as .Waltz, .Jig, .CorsairShot, etc)
    .midcast
    .idle
        .Field
        .Town
        .Weak
    .engaged
    .resting
    .defense
    .Kiting


The Include then searches those general set categories for more specific versions of each group.  For example, sets.precast.FC.Cure would be the set for casting cure spells; sets.idle.Field.PDT would be the field idle set to wear when idle mode is set to PDT; sets.engaged.Dagger would be sets used for melee while wielding a dagger (nb: melee sets have more complex options).


You can add more detail to the set to be used based on a variety of factors, depending on the set category.


When specifying a subset of a major set type for precast and midcast, the Include will check for subsets in the following order:

1) Custom class.  If you define a custom class in classes.CustomClass, the Include will attempt to find that first.

2) Spell name.  It will then attempt to find a set designed for specific spells (eg: Stoneskin, Berserk).

3) Spell map.  At the bottom of the Include is a list of spell mappings, to allow various spells to all be considered a single 'type' (eg: Cure for all single-target cure spells, Minuet for all the different Minuets, etc).

4) Spell skill.  It will then check for the skill used in casting the spell (eg: EnhancingMagic, ElementalMagic).

5) Spell type.  It will then check for the general type of spell (eg: WhiteMagic, BardSong).

Note that for spell types that are abilities (eg: Waltz, CorsairShot, etc), it will further search for the spell name as a subset under the type. EG: sets.precast.Waltz['Healing Waltz'].

Also, weaponskills (whether named or part of a custom class) will search for a set refinement of the weaponskill mode (which can also be custom-specified, if desired).  EG: sets.precast.WS.Upheaval['Mighty Strikes'], sets.precast.WS.MagicalWeaponskills.Brew.



When specifying a subset of melee sets, the include will attempt to construct a set based on a chain of values, all of which are optional (if it doesn't find one value, it will continue to the next in the chain).

1) You may add custom 'group' values to the classes.CustomMeleeClasses list (use classes.CustomMeleeClasses.append(~new group) to add to the list and classes.CustomMeleeClasses.clear() to empty it).  These will be stacked on in the order they exist within the list.  For example, if the list contains 'HundredFists', 'Impetus', the include will continue searching from sets.engaged.HundredFists.Impetus.

2) You may specify a specific weapon via the TPWeapon variable.  For example, you might have different gear sets defined under sets.engaged.GK and sets.engaged.Polearm.

3) You may specify sets based on the OffenseMode value.  For example, you might default to sets.engaged.Dagger, but also have sets.engaged.Dagger.Acc when OffenseMode is set to Acc.

4) You may specify sets based on the DefenseMode value.  For example, you might default to sets.engaged.Dagger, but also have sets.engaged.Dagger.Evasion when DefenseMode is set to Evasion.

A fully-defined set might be something like sets.engaged.HundredFists.Impetus.H2H.Acc.PDT.  However many specification values can be considered optional, so that it will fall back to the next previous set.  For example, rather than sets.engaged.H2H.Normal.Normal (no groups, H2H weapon, normal offense and defense), if H2H is your default weapon you could just as easily use just sets.engaged.



Construct your sets with that in mind, and the Include will be able to handle 95% of set selection and equipping without you needing to write any particular rules.



 ------   RULES   ------


 ---- Basics ----
 
 --- Actions ---

The basic function calls occur for precast, midcast and aftercast, as well as pet_midcast and pet_aftercast.  The Include file handles the precast()/etc functions, and calls special versions within the job file.  These calls are made both before and after the Include file does its predefined work.  EG:

Include: precast()
        Job: job_precast()
        Include: default code
        Job: job_post_precast()

Each time these functions are called, the Include passes certain parameters:

spell: All spell information provided by GearSwap.
action: This no longer carries any information, but is passed through since it still exists within the GearSwap code.
spellMap: This is the general mapping, if any, for the spell.  EG: If the spell.name is 'Choke', the spellMap value will be 'ElementalEnfeeble'.
eventArgs: This is a means of flagging the Include that you don't wish for it to do its default processing.


eventArgs will always have a sub-field of 'handled'.  If you set eventArgs.handled = true, the Include will not perform any default processing on that time slot (such as precast).  It may also have a sub-field of 'cancel', if it's in the pretarget or precast phase.  If you set eventArgs.cancel = true, the Include will cancel the spell and quit any further processing.

The reason for the pre, default, and post ordering for each section is to allow a logical layering of equipment at each level.  If you want to special-case a certain bit of equipment, put that in the Pre section and tell the Include that you handled choosing what gear to equip.  If you want the default gear to be equipped, but possibly make a small modification (eg: Orison Mitts +2 when casting a -na spell with Divine Caress active), put that in the Post section.


 --- Melee ---

While there is a pre/default/post section for aftercast, that's not actually where most gear handling is done for non-action equips (though you can still use it to prevent aftercast from equipping gear, by setting the usual eventArgs.handled to true).

Modifications to the aftercast gear to be equipped is done via two additional functions:

customize_idle_set(idleSet)

customize_melee_set(meleeSet)

These functions allow you to modify the default constructed sets before they're actually equipped.  Return the modified set at the end of the function.


 ---- Advanced ----
 
 --- States & Modes ---

 --- Setting Custom Classes ---




 ---- Custom controls ----
 
State values are controlled via custom commands sent through GearSwap.  There are multiple ways of manipulating each state, as well as a default set of binds for the most common adjustments (you can find those near the bottom of the Include file).

Since commands are sent directly to GearSwap, there are three ways to format the sending depending on where it originates from:

From the command line:  //gs c <command>
From a macro: /console gs c <command>
From a bind: gs c <command>

General command format:

toggle <field>
activate <field>
cycle <mode>
set <state> <value>
reset <resettype>


There are two types of <state>:

<field> is for boolean fields -- they can only be true or false (or on or off, if you prefer).  You can toggle them on and off, or activate them to force them on, or set them to a specific state.  A field that is reset will be turned off.

<mode> is for lists of values.  You can use cycle to increment over that list, returning to the first value after passing the end of the list.  You can use set to assign a specific value, and a reset will return it to the first value of the list.


The valid togglable fields are:

Defense - for all-out defense, either physical or magical (the exact type is set elsewhere)
Kiting - for wearing +movement speed above any other gear
Target - for determination of whether to force use of <stnpc> when performing actions against mobs


The valid cyclable modes are:

OffenseMode - the offense portion of the hybrid melee set (eg: acc, crit, etc)
DefenseMode - the defense portion of the hybrid melee set (eg: evasion, pdt, etc)
CastingMode - the mode describing what type of gear to use for casting (eg: resistant, enmitydown, etc)
WeaponskillMode - a specification of a specific mode to weaponskill with (eg: acc, mod, etc)
IdleMode - the type of idling gear to use (eg: pdt, pet)
RestingMode - the type of gear to wear while resting (eg: petfighting)
PhysicalDefenseMode - the type of physical defense gear when the all-out defense mode is activated (eg: pdt, evasion)
MagicalDefenseMode - the type of magical defense gear when the all-out defense mode is activated (eg: mdt, resist)
TargetMode - the type of target selection method to use with player-targettable spells (eg: stal, stpc, stpt).  Note: predefined, you shouldn't change this.

In addition, you can create additional job-specific modes that are handled via the cycle command.  See thf as an example with TreasureMode.


Note that all modes /should/ have a value of 'Normal' available, usually in the first position of the list so that it can be considered the default value (and thus doesn't need to be specifically named when constructing sets).


Reset works on certain general types:

Defense - turns defense off
Kiting - turns kiting off
Melee - returns OffenseMode and DefenseMode to their default (first) values
Casting - returns CastingMode to its default (first) value
Target - resets both NPC targetting and PC targetting, to turn off any overriding being done
All - resets all fields and modes to their defaults

